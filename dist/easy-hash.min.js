/**!
 * Easy Hash vbeta
 * @author phucbm
 * @homepage https://github.com/phucbm/easy-hash
 * @license MIT 2023
 */
!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var a=e();for(var s in a)("object"==typeof exports?exports:t)[s]=a[s]}}(this,(()=>(()=>{"use strict";var t={r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};function a(t){t.data.previousHash!==t.data.currentHash&&t.callbacks.forEach((e=>e(t.data)))}t.r(e);return window.EasyHash=new class{constructor(){this.callbacks=[],this.data={previousHash:"",currentHash:""}}add(t){if(t||""===t)if(""!==t){if("object"!=typeof t||Array.isArray(t))if("string"==typeof t){const e=t.split("")[0];t="#"===e?t.substring(1):t}else t=t.toString();else t=function(t){const e=[];for(const[a,s]of Object.entries(t))e.push(`${a}=${s}`);return e.toString().replace(",","&")}(t);history.replaceState(null,null,`#${t}`),this.data.previousHash=this.data.currentHash,this.data.currentHash=t,a(this)}else this.remove()}remove(){history.replaceState(null,null,window.location.pathname),this.data.previousHash=this.data.currentHash,this.data.currentHash="",a(this)}getHash(){return window.location.hash}on(t,e){"change"===t?this.callbacks.push(e):console.warn(`Event "${t}" is not recognized!`)}},e})()));